# Generated by Django 5.0.4 on 2024-05-19 14:11

import app2_data.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_study_image', models.ImageField(upload_to='CaseStudy/')),
                ('case_study_title', models.CharField(max_length=150)),
                ('case_study_bio', models.CharField(max_length=255)),
                ('views_count', models.PositiveBigIntegerField(default=0)),
                ('case_study_description', models.TextField()),
                ('post_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job_Vacancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vacancy_title', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('vacancy_des', models.TextField()),
                ('vacancy_requirements', models.TextField()),
                ('roles', models.TextField()),
                ('vacancy_skills', models.TextField()),
                ('vacancy_salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Vacancies',
                'ordering': ['-post_date'],
            },
        ),
        migrations.CreateModel(
            name='JobApplicationStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=100)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='Jobapplicationstep/')),
            ],
            options={
                'ordering': ['-num'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(upload_to='Location/')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45)),
                ('image', models.ImageField(upload_to='Person/')),
                ('post', models.CharField(max_length=25)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('bio', models.CharField(max_length=255)),
                ('blog', models.TextField()),
                ('url', models.URLField(unique=True, validators=[app2_data.models.validate_linkedin_url])),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_title', models.CharField(max_length=100)),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='Book/')),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('questions', models.ManyToManyField(blank=True, related_name='books', to='app2_data.question')),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('bio', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('post_date', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(upload_to='Blog/')),
                ('views_count', models.PositiveBigIntegerField(default=0)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blogs', to='app2_data.category')),
                ('tags', models.ManyToManyField(blank=True, related_name='blogs', to='app2_data.tag')),
            ],
        ),
    ]
